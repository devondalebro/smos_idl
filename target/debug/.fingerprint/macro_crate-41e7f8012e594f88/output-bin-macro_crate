{"$message_type":"diagnostic","message":"unused import: `syn::parse::Parse`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":64,"byte_end":81,"line_start":3,"line_end":3,"column_start":5,"column_end":22,"is_primary":true,"text":[{"text":"use syn::parse::Parse;","highlight_start":5,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":60,"byte_end":83,"line_start":3,"line_end":4,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use syn::parse::Parse;","highlight_start":1,"highlight_end":23},{"text":"use syn::{Expr, Type};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `syn::parse::Parse`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse syn::parse::Parse;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `Expr`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":93,"byte_end":97,"line_start":4,"line_end":4,"column_start":11,"column_end":15,"is_primary":true,"text":[{"text":"use syn::{Expr, Type};","highlight_start":11,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":93,"byte_end":99,"line_start":4,"line_end":4,"column_start":11,"column_end":17,"is_primary":true,"text":[{"text":"use syn::{Expr, Type};","highlight_start":11,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/main.rs","byte_start":92,"byte_end":93,"line_start":4,"line_end":4,"column_start":10,"column_end":11,"is_primary":true,"text":[{"text":"use syn::{Expr, Type};","highlight_start":10,"highlight_end":11}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/main.rs","byte_start":103,"byte_end":104,"line_start":4,"line_end":4,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"use syn::{Expr, Type};","highlight_start":21,"highlight_end":22}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Expr`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:4:11\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse syn::{Expr, Type};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `File`, `ItemFn`, `ItemMod`, `PatType`, `TypeArray`, `parse_macro_input`, and `parse`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":116,"byte_end":121,"line_start":5,"line_end":5,"column_start":11,"column_end":16,"is_primary":true,"text":[{"text":"use syn::{parse, parse_macro_input, File, FnArg, Item, ItemFn, ItemMod, ItemTrait, Pat, PatType, TraitItem, TraitItemFn, TypeArray};","highlight_start":11,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":123,"byte_end":140,"line_start":5,"line_end":5,"column_start":18,"column_end":35,"is_primary":true,"text":[{"text":"use syn::{parse, parse_macro_input, File, FnArg, Item, ItemFn, ItemMod, ItemTrait, Pat, PatType, TraitItem, TraitItemFn, TypeArray};","highlight_start":18,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":142,"byte_end":146,"line_start":5,"line_end":5,"column_start":37,"column_end":41,"is_primary":true,"text":[{"text":"use syn::{parse, parse_macro_input, File, FnArg, Item, ItemFn, ItemMod, ItemTrait, Pat, PatType, TraitItem, TraitItemFn, TypeArray};","highlight_start":37,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":161,"byte_end":167,"line_start":5,"line_end":5,"column_start":56,"column_end":62,"is_primary":true,"text":[{"text":"use syn::{parse, parse_macro_input, File, FnArg, Item, ItemFn, ItemMod, ItemTrait, Pat, PatType, TraitItem, TraitItemFn, TypeArray};","highlight_start":56,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":169,"byte_end":176,"line_start":5,"line_end":5,"column_start":64,"column_end":71,"is_primary":true,"text":[{"text":"use syn::{parse, parse_macro_input, File, FnArg, Item, ItemFn, ItemMod, ItemTrait, Pat, PatType, TraitItem, TraitItemFn, TypeArray};","highlight_start":64,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":194,"byte_end":201,"line_start":5,"line_end":5,"column_start":89,"column_end":96,"is_primary":true,"text":[{"text":"use syn::{parse, parse_macro_input, File, FnArg, Item, ItemFn, ItemMod, ItemTrait, Pat, PatType, TraitItem, TraitItemFn, TypeArray};","highlight_start":89,"highlight_end":96}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":227,"byte_end":236,"line_start":5,"line_end":5,"column_start":122,"column_end":131,"is_primary":true,"text":[{"text":"use syn::{parse, parse_macro_input, File, FnArg, Item, ItemFn, ItemMod, ItemTrait, Pat, PatType, TraitItem, TraitItemFn, TypeArray};","highlight_start":122,"highlight_end":131}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":116,"byte_end":148,"line_start":5,"line_end":5,"column_start":11,"column_end":43,"is_primary":true,"text":[{"text":"use syn::{parse, parse_macro_input, File, FnArg, Item, ItemFn, ItemMod, ItemTrait, Pat, PatType, TraitItem, TraitItemFn, TypeArray};","highlight_start":11,"highlight_end":43}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/main.rs","byte_start":159,"byte_end":176,"line_start":5,"line_end":5,"column_start":54,"column_end":71,"is_primary":true,"text":[{"text":"use syn::{parse, parse_macro_input, File, FnArg, Item, ItemFn, ItemMod, ItemTrait, Pat, PatType, TraitItem, TraitItemFn, TypeArray};","highlight_start":54,"highlight_end":71}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/main.rs","byte_start":192,"byte_end":201,"line_start":5,"line_end":5,"column_start":87,"column_end":96,"is_primary":true,"text":[{"text":"use syn::{parse, parse_macro_input, File, FnArg, Item, ItemFn, ItemMod, ItemTrait, Pat, PatType, TraitItem, TraitItemFn, TypeArray};","highlight_start":87,"highlight_end":96}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/main.rs","byte_start":225,"byte_end":236,"line_start":5,"line_end":5,"column_start":120,"column_end":131,"is_primary":true,"text":[{"text":"use syn::{parse, parse_macro_input, File, FnArg, Item, ItemFn, ItemMod, ItemTrait, Pat, PatType, TraitItem, TraitItemFn, TypeArray};","highlight_start":120,"highlight_end":131}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `File`, `ItemFn`, `ItemMod`, `PatType`, `TypeArray`, `parse_macro_input`, and `parse`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:5:11\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse syn::{parse, parse_macro_input, File, FnArg, Item, ItemFn, ItemMod, ItemTrait, Pat, PatType, TraitItem, TraitItemFn, TypeArray};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"binary operation `==` cannot be applied to type `syn::Type`","code":{"code":"E0369","explanation":"A binary operation was attempted on a type which doesn't support it.\n\nErroneous code example:\n\n```compile_fail,E0369\nlet x = 12f32; // error: binary operation `<<` cannot be applied to\n               //        type `f32`\n\nx << 2;\n```\n\nTo fix this error, please check that this type implements this binary\noperation. Example:\n\n```\nlet x = 12u32; // the `u32` type does implement it:\n               // https://doc.rust-lang.org/stable/std/ops/trait.Shl.html\n\nx << 2; // ok!\n```\n\nIt is also possible to overload most operators for your own type by\nimplementing traits from `std::ops`.\n\nString concatenation appends the string on the right to the string on the\nleft and may require reallocation. This requires ownership of the string\non the left. If something should be added to a string literal, move the\nliteral to the heap by allocating it with `to_owned()` like in\n`\"Your text\".to_owned()`.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":2146,"byte_end":2205,"line_start":67,"line_end":67,"column_start":20,"column_end":79,"is_primary":false,"text":[{"text":"                if syn::parse_str::<syn::Type>(\"i32\").expect(\"Couldn't parse\") == t.ty.as_ref() {","highlight_start":20,"highlight_end":79}],"label":"syn::Type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":2209,"byte_end":2222,"line_start":67,"line_end":67,"column_start":83,"column_end":96,"is_primary":false,"text":[{"text":"                if syn::parse_str::<syn::Type>(\"i32\").expect(\"Couldn't parse\") == t.ty.as_ref() {","highlight_start":83,"highlight_end":96}],"label":"&syn::Type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":2206,"byte_end":2208,"line_start":67,"line_end":67,"column_start":80,"column_end":82,"is_primary":true,"text":[{"text":"                if syn::parse_str::<syn::Type>(\"i32\").expect(\"Couldn't parse\") == t.ty.as_ref() {","highlight_start":80,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the foreign item type `syn::Type` doesn't implement `PartialEq<&syn::Type>`","code":null,"level":"note","spans":[{"file_name":"/Users/devondalebro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-2.0.98/src/macros.rs","byte_start":1631,"byte_end":1653,"line_start":61,"line_end":61,"column_start":27,"column_end":49,"is_primary":true,"text":[{"text":"        $(#[$enum_attr])* $pub $enum $name $body","highlight_start":27,"highlight_end":49}],"label":"not implement `PartialEq<&syn::Type>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/devondalebro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-2.0.98/src/ty.rs","byte_start":325,"byte_end":2895,"line_start":13,"line_end":90,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"ast_enum_of_structs! {","highlight_start":1,"highlight_end":1},{"text":"    /// The possible types that a Rust value could have.","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// # Syntax tree enum","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// This type is a [syntax tree enum].","highlight_start":1,"highlight_end":1},{"text":"    ///","highlight_start":1,"highlight_end":1},{"text":"    /// [syntax tree enum]: crate::expr::Expr#syntax-tree-enums","highlight_start":1,"highlight_end":1},{"text":"    #[cfg_attr(docsrs, doc(cfg(any(feature = \"full\", feature = \"derive\"))))]","highlight_start":1,"highlight_end":1},{"text":"    #[non_exhaustive]","highlight_start":1,"highlight_end":1},{"text":"    pub enum Type {","highlight_start":1,"highlight_end":1},{"text":"        /// A fixed size array type: `[T; n]`.","highlight_start":1,"highlight_end":1},{"text":"        Array(TypeArray),","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// A bare function type: `fn(usize) -> bool`.","highlight_start":1,"highlight_end":1},{"text":"        BareFn(TypeBareFn),","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// A type contained within invisible delimiters.","highlight_start":1,"highlight_end":1},{"text":"        Group(TypeGroup),","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or","highlight_start":1,"highlight_end":1},{"text":"        /// a lifetime.","highlight_start":1,"highlight_end":1},{"text":"        ImplTrait(TypeImplTrait),","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Indication that a type should be inferred by the compiler: `_`.","highlight_start":1,"highlight_end":1},{"text":"        Infer(TypeInfer),","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// A macro in the type position.","highlight_start":1,"highlight_end":1},{"text":"        Macro(TypeMacro),","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// The never type: `!`.","highlight_start":1,"highlight_end":1},{"text":"        Never(TypeNever),","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// A parenthesized type equivalent to the inner type.","highlight_start":1,"highlight_end":1},{"text":"        Paren(TypeParen),","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// A path like `std::slice::Iter`, optionally qualified with a","highlight_start":1,"highlight_end":1},{"text":"        /// self-type as in `<Vec<T> as SomeTrait>::Associated`.","highlight_start":1,"highlight_end":1},{"text":"        Path(TypePath),","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// A raw pointer type: `*const T` or `*mut T`.","highlight_start":1,"highlight_end":1},{"text":"        Ptr(TypePtr),","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// A reference type: `&'a T` or `&'a mut T`.","highlight_start":1,"highlight_end":1},{"text":"        Reference(TypeReference),","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// A dynamically sized slice type: `[T]`.","highlight_start":1,"highlight_end":1},{"text":"        Slice(TypeSlice),","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// A trait object type `dyn Bound1 + Bound2 + Bound3` where `Bound` is a","highlight_start":1,"highlight_end":1},{"text":"        /// trait or a lifetime.","highlight_start":1,"highlight_end":1},{"text":"        TraitObject(TypeTraitObject),","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// A tuple type: `(A, B, C, String)`.","highlight_start":1,"highlight_end":1},{"text":"        Tuple(TypeTuple),","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        /// Tokens in type position not interpreted by Syn.","highlight_start":1,"highlight_end":1},{"text":"        Verbatim(TokenStream),","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // For testing exhaustiveness in downstream code, use the following idiom:","highlight_start":1,"highlight_end":1},{"text":"        //","highlight_start":1,"highlight_end":1},{"text":"        //     match ty {","highlight_start":1,"highlight_end":1},{"text":"        //         #![cfg_attr(test, deny(non_exhaustive_omitted_patterns))]","highlight_start":1,"highlight_end":1},{"text":"        //","highlight_start":1,"highlight_end":1},{"text":"        //         Type::Array(ty) => {...}","highlight_start":1,"highlight_end":1},{"text":"        //         Type::BareFn(ty) => {...}","highlight_start":1,"highlight_end":1},{"text":"        //         ...","highlight_start":1,"highlight_end":1},{"text":"        //         Type::Verbatim(ty) => {...}","highlight_start":1,"highlight_end":1},{"text":"        //","highlight_start":1,"highlight_end":1},{"text":"        //         _ => { /* some sane fallback */ }","highlight_start":1,"highlight_end":1},{"text":"        //     }","highlight_start":1,"highlight_end":1},{"text":"        //","highlight_start":1,"highlight_end":1},{"text":"        // This way we fail your tests but don't break your library when adding","highlight_start":1,"highlight_end":1},{"text":"        // a variant. You will be notified by a test failure when a variant is","highlight_start":1,"highlight_end":1},{"text":"        // added, so that you can add code to handle it, but your library will","highlight_start":1,"highlight_end":1},{"text":"        // continue to compile and work for downstream users in the interim.","highlight_start":1,"highlight_end":1},{"text":"    }","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"ast_enum_of_structs!","def_site_span":{"file_name":"/Users/devondalebro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-2.0.98/src/macros.rs","byte_start":1383,"byte_end":1415,"line_start":53,"line_end":53,"column_start":1,"column_end":33,"is_primary":false,"text":[{"text":"macro_rules! ast_enum_of_structs {","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0369]\u001b[0m\u001b[0m\u001b[1m: binary operation `==` cannot be applied to type `syn::Type`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:67:80\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                if syn::parse_str::<syn::Type>(\"i32\").expect(\"Couldn't parse\") == t.ty.as_ref() {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m&syn::Type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12msyn::Type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the foreign item type `syn::Type` doesn't implement `PartialEq<&syn::Type>`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/devondalebro/.cargo/registry/src/index.crates.io-6f17d22bba15001f/syn-2.0.98/src/ty.rs:13:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mast_enum_of_structs! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// The possible types that a Rust value could have.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ///\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    /// # Syntax tree enum\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mnot implement `PartialEq<&syn::Type>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `ast_enum_of_structs` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 1 previous error; 3 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 1 previous error; 3 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0369`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0369`.\u001b[0m\n"}
